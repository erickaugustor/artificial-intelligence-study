library(dplyr)
library(ggplot2)
data(murders)
head(murders)
head(murders, 30)
murders
murders
data(murders)
data(murders)
murders
data(murders)
data(murders)
data(murders)
murdersBackup <- murders
data(murders)
murdersBackup <- murders
# Murders
library(dslabs)
# Plot
library(dplyr)
library(ggplot2)
data(murders)
murdersBackup <- murders
ggplot(data = murders)
ggplot(data = murders)
class(finalPlot)
finalPlot <- ggplot(data = murders)
class(finalPlot)
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total))
finalPlot
# Add names
finalPlot <- geom_point(aes(population/10^6, total)) + geom_text(aes(populatio/10^6, total, label = abb))
# Add names
finalPlot <- geom_point(aes(population/10^6, total)) + geom_text(aes(populatio/10^6, total, label = abb))
# Add names
finalPlot <- finalPlot + geom_point(aes(population/10^6, total)) + geom_text(aes(populatio/10^6, total, label = abb))
# Add names
finalPlot <- finalPlot + geom_point(aes(population/10^6, total)) + geom_text(aes(populatio/10^6, total, label = abb))
finalPlot
# Add names
finalPlot <- finalPlot + geom_point(aes(population/10^6, total)) + geom_text(aes(population/10^6, total, label = abb))
finalPlot
finalPlot
# Add names
finalPlot <- finalPlot + geom_point(aes(population/10^6, total)) + geom_text(aes(population/10^6, total, label = abb))
finalPlot
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total), size=3)
finalPlot
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total), size=3)
finalPlot
# Generate a empty plot without geometric
ggplot(data = murders)
finalPlot <- ggplot(data = murders)
class(finalPlot)
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total), size=3)
finalPlot
# Add names
finalPlot <- finalPlot + geom_point(aes(population/10^6, total)) + geom_text(aes(population/10^6, total, label = abb))
# Add names
finalPlot <- finalPlot + geom_text(aes(population/10^6, total, label = abb))
finalPlot
# Add names
finalPlot <- finalPlot + geom_text(aes(population/10^6, total, label = abb), nudge_x = 1)
finalPlot
# Change scale
finalPlot <- finalPlot + scale_x_continuous(trans = "log10")
finalPlot <- finalPlot + scale_y_continuous(trans = "log10")
finalPlot
finalPlot <- ggplot(data = murders)
class(finalPlot)
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total), size=3)
finalPlot
# Add names
finalPlot <- finalPlot + geom_text(aes(population/10^6, total, label = abb), nudge_x = 1)
finalPlot
# Change scale
finalPlot <- finalPlot + scale_x_continuous(trans = "log10")
finalPlot <- finalPlot + scale_y_continuous(trans = "log10")
finalPlot
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total), size=3)
finalPlot
# Add names
finalPlot <- finalPlot + geom_text(aes(population/10^6, total, label = abb), nudge_x = 0.05)
finalPlot
# Change scale
finalPlot <- finalPlot + scale_x_continuous(trans = "log10")
finalPlot <- finalPlot + scale_y_continuous(trans = "log10")
finalPlot
finalPlot <- ggplot(data = murders)
class(finalPlot)
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total), size=3)
finalPlot
# Add names
finalPlot <- finalPlot + geom_text(aes(population/10^6, total, label = abb), nudge_x = 0.05)
finalPlot
# Change scale
finalPlot <- finalPlot + scale_x_continuous(trans = "log10")
finalPlot <- finalPlot + scale_y_continuous(trans = "log10")
finalPlot
# Desc for table
finalPlot <- finalPlot + xlab("Populations in millions (log scale)")
finalPlot <- finalPlot + ylab("Total number of murders (log scale)")
finalPlot <- ggtitle("US Gun Murders in 2010")
final
finalPlot
data(murders)
murdersBackup <- murders
# Generate a empty plot without geometric
ggplot(data = murders)
finalPlot <- ggplot(data = murders)
class(finalPlot)
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total), size=3)
finalPlot
# Add names
finalPlot <- finalPlot + geom_text(aes(population/10^6, total, label = abb), nudge_x = 0.05)
finalPlot
# Change scale
finalPlot <- finalPlot + scale_x_continuous(trans = "log10")
finalPlot <- finalPlot + scale_y_continuous(trans = "log10")
finalPlot
# Desc for table
finalPlot <- finalPlot + xlab("Populations in millions (log scale)")
finalPlot <- finalPlot + ylab("Total number of murders (log scale)")
finalPlot <- finalPlot + ggtitle("US Gun Murders in 2010")
finalPlot
data(murders)
murdersBackup <- murders
# Generate a empty plot without geometric
ggplot(data = murders)
finalPlot <- ggplot(data = murders)
class(finalPlot)
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total), size=3)
finalPlot
# Add names
finalPlot <- finalPlot + geom_text(aes(population/10^6, total, label = abb), nudge_x = 0.05, color="pink")
finalPlot
# Change scale
finalPlot <- finalPlot + scale_x_continuous(trans = "log10")
finalPlot <- finalPlot + scale_y_continuous(trans = "log10")
finalPlot
# Desc for table
finalPlot <- finalPlot + xlab("Populations in millions (log scale)")
finalPlot <- finalPlot + ylab("Total number of murders (log scale)")
finalPlot <- finalPlot + ggtitle("US Gun Murders in 2010")
finalPlot
# Plot
library(dplyr)
library(ggplot2)
data(murders)
murdersBackup <- murders
# Generate a empty plot without geometric
ggplot(data = murders)
finalPlot <- ggplot(data = murders)
class(finalPlot)
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total), size=3, color="pink")
finalPlot
# Add names
finalPlot <- finalPlot + geom_text(aes(population/10^6, total, label = abb), nudge_x = 0.05, color="gray")
finalPlot
# Change scale
finalPlot <- finalPlot + scale_x_continuous(trans = "log10")
finalPlot <- finalPlot + scale_y_continuous(trans = "log10")
finalPlot
# Desc for table
finalPlot <- finalPlot + xlab("Populations in millions (log scale)")
finalPlot <- finalPlot + ylab("Total number of murders (log scale)")
finalPlot <- finalPlot + ggtitle("US Gun Murders in 2010")
finalPlot
finalPlot <- ggplot(data = murders)
class(finalPlot)
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total), size=3, color="pink")
finalPlot
# Add names
finalPlot <- finalPlot + geom_text(aes(population/10^6, total, label = abb), nudge_x = 0.05, color="black")
finalPlot
# Change scale
finalPlot <- finalPlot + scale_x_continuous(trans = "log10")
finalPlot <- finalPlot + scale_y_continuous(trans = "log10")
finalPlot
# Desc for table
finalPlot <- finalPlot + xlab("Populations in millions (log scale)")
finalPlot <- finalPlot + ylab("Total number of murders (log scale)")
finalPlot <- finalPlot + ggtitle("US Gun Murders in 2010")
finalPlot
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total, col=region), size=3)
finalPlot
# Add names
finalPlot <- finalPlot + geom_text(aes(population/10^6, total, label = abb), nudge_x = 0.05, color="black")
finalPlot
# Change scale
finalPlot <- finalPlot + scale_x_continuous(trans = "log10")
finalPlot <- finalPlot + scale_y_continuous(trans = "log10")
finalPlot
# Desc for table
finalPlot <- finalPlot + xlab("Populations in millions (log scale)")
finalPlot <- finalPlot + ylab("Total number of murders (log scale)")
finalPlot <- finalPlot + ggtitle("US Gun Murders in 2010")
finalPlot
data(murders)
murdersBackup <- murders
# Generate a empty plot without geometric
ggplot(data = murders)
finalPlot <- ggplot(data = murders)
class(finalPlot)
# Define a geometric plot
finalPlot <- finalPlot + geom_point(aes(x = population/10^6, y=total, col=region), size=3)
finalPlot
# Add names
finalPlot <- finalPlot + geom_text(aes(population/10^6, total, label = abb), nudge_x = 0.05, color="black")
finalPlot
# Change scale
finalPlot <- finalPlot + scale_x_continuous(trans = "log10")
finalPlot <- finalPlot + scale_y_continuous(trans = "log10")
finalPlot
# Desc for table
finalPlot <- finalPlot + xlab("Populations in millions (log scale)")
finalPlot <- finalPlot + ylab("Total number of murders (log scale)")
finalPlot <- finalPlot + ggtitle("US Gun Murders in 2010")
finalPlot
dataset <- cars
cars
plot(dataset)
library(ggplot2)
dataset
ggplot(dataset) +
geom_point(mapping = aes(x = speed, y = istcolor = "sepeed")) +
geom_abline(intercept = 0, slope = 1, color = "red")
ggplot(dataset) +
geom_point(mapping = aes(x = speed, y = istcolor = "sepeed")) +
geom_abline(intercept = 0, slope = 1, color = "red")
ggplot(dataset) +
geom_point(mapping = aes(x = speed, y = istcolor = "sepeed"))
ggplot(dataset) +
geom_point(mapping = aes(x = speed, y = dist, color = "sepeed"))
ggplot(dataset) +
geom_point(mapping = aes(x = speed, y = dist, color = "speed"))
ggplot(dataset) +
geom_point(mapping = aes(x = speed, y = dist, color = "speed")) +
geom_abline(intercept = 0, slope = 1, color = "red")
ggplot(dataset) +
geom_point(mapping = aes(x = speed, y = dist, color = "speed"))
â€¢ lm = lm(V1~V2, data = mydata)
lm = lm(V1~V2, data = mydata)
lm = lm(V1~V2, data = dataset)
lm = lm(speed~dist, data = dataset)
ld
lm
index <- sample(1:nrow(dataset), as.integer(0.* nrow(dataset)))
train <- dataset[index, ]
test <- dataset[-index, ]
plot(train)
train
index <- sample(1:nrow(dataset), as.integer(0.* nrow(dataset)))
train <- dataset[index, ]
test <- dataset[-index, ]
index <- sample(1:nrow(dataset), as.integer(0.* nrow(dataset)))
train <- dataset[index, ]
test <- dataset[-index, ]
train
index
index <- sample(1:nrow(dataset), as.integer(0.8* nrow(dataset)))
train
train <- dataset[index, ]
train <- dataset[index, ]
train <- dataset[index, ]
test <- dataset[-index, ]
plot(train)
plot(test)
lm = lm(speed~dist, data = dataset)
plot(train)
plot(test)
lm = lm(speed~dist, data = train)
lm
plot(mydata, xlab = "Population", ylab="profit") + abline(lm)
plot(dataset, xlab = "Population", ylab="profit") + abline(lm)
plot(train, xlab = "Population", ylab="profit") + abline(lm)
plot(train)
lm = lm(speed~dist, data = train)
lm
plot(train, xlab = "Population", ylab="profit") + abline(lm)
plot(train) + abline(lm)
plot(train) + abline(lm)
lm = lm(speed~dist, data = train)
lm
plot(train) + abline(lm)
plot(train) abline(lm)
plot(train)
abline(lm)
plot(train)
abline(lm)
abline(lm)
train
plot(train)
plot(train)
plot(train)
lm = lm(speed~dist, data = train)
lm
plot(train) + abline(lm)
lm = lm(dist~speed, data = train)
plot(train) + abline(lm)
lm = lm(dist~speed, data = train)
plot(train) + abline(lm)
plot(test) + abline(lm)
#Plot graph for the test with the lm
plot(test) + abline(lm)
pred <- predict(lm, test)
pred
plot(pred)
plot(pred)
pred <- predict(lm, test)
#Plot graph for the test with the lm
plot(test) + abline(lm)
function (x, y, ...)
plot(pred)
plot(pred)
install.packages("foreach")
install.packages("biglm")
install.packages("DBI")
#####################################################################
# For big tables
library(bigmemory)
library(biganalytics)
library(bigtabulate)
#####################################################################
# svm
install.packages("e1071")
#####################################################################
# For big tables
library(bigmemory)
library(biganalytics)
#####################################################################
# For big tables
library(bigmemory)
#####################################################################
# For big tables
library(bigmemory)
library(tidyverse)
library(ggplot2)
locationFiles <- paste0(getwd(), '/files-numbers')
setwd(locationFiles)
filesList <- list.files(path = locationFiles)
dataFrame <- data.frame()
classe <- c()
for(file in filesList) {
classe <- c(classe, as.numeric(unlist(strsplit(file, "_"))[1]))
contentFile <- read_lines(file)
contentFile <- contentFile[-(1:3)] # Remove the first three lines
contentFile <- unlist(strsplit(contentFile, " ")) # Break into spaces
contentFile <- as.numeric(contentFile) # Transform to numbers
dataFrame <- matrix(
unlist(contentFile),
nrow = nrow(dataFrame) + 1,
ncol = length(contentFile)
)
dataFrame <- as.data.frame(dataFrame)
dataFrame$classe <- classe
}
setwd("C:/Users/oeric/Desktop/Git/artificial-intelligence-study/knn-problem/numbers")
library(tidyverse)
library(ggplot2)
locationFiles <- paste0(getwd(), '/files-numbers')
setwd(locationFiles)
filesList <- list.files(path = locationFiles)
dataFrame <- data.frame()
classe <- c()
for(file in filesList) {
classe <- c(classe, as.numeric(unlist(strsplit(file, "_"))[1]))
contentFile <- read_lines(file)
contentFile <- contentFile[-(1:3)] # Remove the first three lines
contentFile <- unlist(strsplit(contentFile, " ")) # Break into spaces
contentFile <- as.numeric(contentFile) # Transform to numbers
dataFrame <- matrix(
unlist(contentFile),
nrow = nrow(dataFrame) + 1,
ncol = length(contentFile)
)
dataFrame <- as.data.frame(dataFrame)
dataFrame$classe <- classe
}
indexes <- sample(1:nrow(dataFrame), as.integer(0.8 * nrow(dataFrame)))
train <- dataFrame[indexes, ]
trainBackup <- train
test <- dataFrame[-indexes, ]
classesTrain <- train$classe
classesTest <- factor(test$classe)
test$classe <- NULL
train$classe <- NULL
# K-means
library(cluster)
# K-means
library(cluster)
# K-means
library(cluster)
dataFrameCluster <- dataFrame[,-4097]
setwd("C:/Users/oeric/Desktop/Git/artificial-intelligence-study/knn-problem/numbers")
library(tidyverse)
library(ggplot2)
locationFiles <- paste0(getwd(), '/files-numbers')
setwd(locationFiles)
filesList <- list.files(path = locationFiles)
dataFrame <- data.frame()
classe <- c()
for(file in filesList) {
classe <- c(classe, as.numeric(unlist(strsplit(file, "_"))[1]))
contentFile <- read_lines(file)
contentFile <- contentFile[-(1:3)] # Remove the first three lines
contentFile <- unlist(strsplit(contentFile, " ")) # Break into spaces
contentFile <- as.numeric(contentFile) # Transform to numbers
dataFrame <- matrix(
unlist(contentFile),
nrow = nrow(dataFrame) + 1,
ncol = length(contentFile)
)
dataFrame <- as.data.frame(dataFrame)
dataFrame$classe <- classe
}
indexes <- sample(1:nrow(dataFrame), as.integer(0.8 * nrow(dataFrame)))
train <- dataFrame[indexes, ]
trainBackup <- train
test <- dataFrame[-indexes, ]
classesTrain <- train$classe
classesTest <- factor(test$classe)
test$classe <- NULL
train$classe <- NULL
# K-means
library(cluster)
dataFrameCluster <- dataFrame[,-4097]
resultKMeans <- kmeans(dataFrameCluster, 10)
resultKMeans
plot3d(dataFrameCluster, col=resultKMeans$cluster, main="KMeans Clusters")
fviz_nbclust(dataFrameCluster, kmeans, method = "wss")
fviz_nbclust(dataFrameCluster, kmeans, method = "wss")
gap_stat <- clusGap(dataFrame, FUN = kmeans, nstart = 1, K.max = 2, B = 1)
fviz_nbclust(dataFrameCluster, kmeans, method = "wss")
# K-means
install.packages("factoextra")
library(factoextra)
fviz_nbclust(dataFrameCluster, kmeans, method = "wss")
fviz_nbclust
plot3d(dataFrameCluster, col=resultKMeans$cluster, main="KMeans Clusters")
fviz_cluster(resultKMeans,
data = dataFrameCluster,
palette = c("#00AFBB","#2E9FDF", "#E7B800", "#FC4E07"),
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
fviz_cluster
fviz_cluster(resultKMeans,
data = dataFrameCluster,
ggtheme = theme_minimal(),
main = "Partitioning Clustering Plot"
)
fviz_cluster
clusplot(resultKMeans,
resultKMeans,
main='2D representation of the Cluster solution',
color=TRUE,
shade=TRUE,
labels=2,
lines=0)
clusplot(resultKMeans,
resultKMeans,
main='2D representation of the Cluster solution',
color=TRUE,
shade=TRUE,
labels=2,
lines=0)
clusplot(dataFrameCluster,
resultKMeans,
main='2D representation of the Cluster solution',
color=TRUE,
shade=TRUE,
labels=2,
lines=0)
foodagg=agnes(resultKMeans,diss=FALSE,metric="euclidian")
foodagg=agnes(resultKMeans,diss=FALSE,metric="euclidian")
dataFrameCluster
foodagg <- agnes(dataFrameCluster, diss=FALSE, metric="euclidian")
foodagg
foodagg
plot(foodagg, main='Dendrogram')
foodagg
groups <- cutree(foodagg, k=11) # cut tree into 10 clusters
groups
rect.hclust(foodagg, k=11, border="red")
groups <- cutree(foodagg, k=10) # cut tree into 10 clusters
rect.hclust(foodagg, k=10, border="red")
rect.hclust(foodagg, k=10, border="red")
groups <- cutree(foodagg, k=10) # cut tree into 10 clusters
groups
rect.hclust(foodagg, k=10, border="red")
rect.hclust(foodagg, k=10, border="red")
groups <- cutree(foodagg, k=10) # cut tree into 10 clusters
rect.hclust(foodagg, k=10, border="red")
foodagg <- agnes(dataFrameCluster, diss=FALSE, metric="euclidian")
groups <- cutree(foodagg, k=10) # cut tree into 10 clusters
rect.hclust(foodagg, k=10, border="red")
foodagg <- agnes(dataFrameCluster, diss=FALSE, metric="euclidian")
groups <- cutree(foodagg, k=10) # cut tree into 10 clusters
rect.hclust(foodagg, k=10, border="red")
